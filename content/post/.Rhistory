scale_fill_gradient(low = "white", high = "red") +    # Specify the gradient colors
guides(fill = FALSE) +                                 # Remove the legend
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
medium_by_device
gg_sparklines <- ggplot(ga_data, mapping=aes(x = date, y = sessions)) +
geom_line() +
facet_grid(medium ~ deviceCategory, switch = "y") +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, colour = "gray80"),
panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
strip.text.y = element_text(angle = 180, hjust = 1),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank())
gg_sparklines
ga_data_top_10 <- ga_data %>%
arrange(-pageviews) %>%
top_n(10) %>%
mutate(pagePath = factor(pagePath,
levels = rev(pagePath)))
library("googleAnalyticsR")
library("googleAuthR")
library("googleVis")
library("tidyverse")
library("magrittr")
library("tidyr")
gar_auth(token = NULL, new_user = FALSE)
library("googleAnalyticsR")
library("googleAuthR")
library("googleVis")
library("tidyverse")
library("magrittr")
library("tidyr")
start_date <- "2016-01-01"
end_date <- "2018-01-01"
ga_data <- google_analytics(viewId = 91606028,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date","deviceCategory", "medium"),
anti_sample = TRUE)
saveRDS(ga_data, "ga_data.rds")  #saves data so that we don't call the API everytime
my_data <- readRDS("ga_data.rds") #reads data
sessions_by_device <- ggplot(my_data, mapping = aes(x = date, y = sessions, colour = deviceCategory)) +
geom_line() +
theme_light()
sessions_by_device
sessions_by_medium <- ggplot(my_data, mapping = aes(x = medium, y = sessions)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_light() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.border = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank())
sessions_by_medium
ga_data_totals <- my_data %>%
group_by(medium, deviceCategory) %>%
summarise(sessions = sum(sessions))
medium_totals <- my_data %>%
group_by(medium) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
deviceCategory_totals <- my_data %>%
group_by(deviceCategory) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
my_data$medium <- factor(my_data$medium,
levels = medium_totals$medium)
my_data$deviceCategory <- factor(my_data$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
ga_data_totals$medium <- factor(ga_data_totals$medium,
levels = rev(medium_totals$medium))    # Reversing the factor order
ga_data_totals$deviceCategory <- factor(ga_data_totals$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
head(ga_data_totals)
medium_by_device <- ggplot(ga_data_totals, mapping=aes(x = deviceCategory, y = medium)) +
geom_tile(aes(fill = sessions), colour = "grey30") +
geom_text(aes(label = format(sessions, big.mark = ","))) +
scale_fill_gradient(low = "white", high = "red") +    # Specify the gradient colors
guides(fill = FALSE) +                                 # Remove the legend
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
medium_by_device
gg_sparklines <- ggplot(ga_data, mapping=aes(x = date, y = sessions)) +
geom_line() +
facet_grid(medium ~ deviceCategory, switch = "y") +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, colour = "gray80"),
panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
strip.text.y = element_text(angle = 180, hjust = 1),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank())
gg_sparklines
ga_data_top_10 <- ga_data %>%
arrange(-pageviews) %>%
top_n(10) %>%
mutate(pagePath = factor(pagePath,
levels = rev(pagePath)))
q()
library("googleAnalyticsR")
library("googleAuthR")
library("googleVis")
library("tidyverse")
library("magrittr")
library("tidyr")
ga_auth(new_user = TRUE)
googleAuthr::gar_auth(".httr-oauth")
googleAuthR::gar_auth(".httr-oauth")
ga_auth(new_user = TRUE)
q()
df2$month<-format(df2$date,"%m")
df2$year<-format(df2$date,"%Y")
#include dplyr library to group data by month and year
library(dplyr)
#sessions by month by year using dplyr then graph using ggplot2 bar graph
df2 %>%
group_by(year,month) %>%
summarize(sessions=sum(sessions)) %>%
#print table steps by month by year
print (n=100) %>%
#graph data by month by year
ggplot(aes(x=month, y=sessions, fill=year)) +
geom_bar(position='dodge', stat='identity')
my_data$month<-format(df2$date,"%m")
my_data <-format(df2$date,"%Y")
#include dplyr library to group data by month and year
library(dplyr)
#sessions by month by year using dplyr then graph using ggplot2 bar graph
my_data %>%
group_by(year,month) %>%
summarize(sessions=sum(sessions)) %>%
#print table steps by month by year
print (n=100) %>%
#graph data by month by year
ggplot(aes(x=month, y=sessions, fill=year)) +
geom_bar(position='dodge', stat='identity')
ga_data$month<-format(df2$date,"%m")
ga_data <-format(df2$date,"%Y")
#include dplyr library to group data by month and year
library(dplyr)
#sessions by month by year using dplyr then graph using ggplot2 bar graph
ga_data %>%
group_by(year,month) %>%
summarize(sessions=sum(sessions)) %>%
#print table steps by month by year
print (n=100) %>%
#graph data by month by year
ggplot(aes(x=month, y=sessions, fill=year)) +
geom_bar(position='dodge', stat='identity')
library("googleAnalyticsR")
library("googleAuthR")
library("googleVis")
library("tidyverse")
library("magrittr")
library("tidyr")
# this is where our authentication token must live snug and warm.
googleAuthR::gar_auth("~/Dropbox/Github/.httr-oauth")
start_date <- "2016-01-01"
end_date <- "2018-01-01"
ga_data <- google_analytics(viewId = 91606028,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date","deviceCategory", "medium"),
anti_sample = TRUE)
saveRDS(ga_data, "ga_data.rds")  #saves data so that we don't call the API everytime
my_data <- readRDS("ga_data.rds") #reads data
sessions_by_device <- ggplot(my_data, mapping = aes(x = date, y = sessions, colour = deviceCategory)) +
geom_line() +
theme_light()
sessions_by_device
sessions_by_medium <- ggplot(my_data, mapping = aes(x = medium, y = sessions)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_light() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.border = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank())
sessions_by_medium
ga_data_totals <- my_data %>%
group_by(medium, deviceCategory) %>%
summarise(sessions = sum(sessions))
medium_totals <- my_data %>%
group_by(medium) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
deviceCategory_totals <- my_data %>%
group_by(deviceCategory) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
my_data$medium <- factor(my_data$medium,
levels = medium_totals$medium)
my_data$deviceCategory <- factor(my_data$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
ga_data_totals$medium <- factor(ga_data_totals$medium,
levels = rev(medium_totals$medium))    # Reversing the factor order
ga_data_totals$deviceCategory <- factor(ga_data_totals$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
head(ga_data_totals)
medium_by_device <- ggplot(ga_data_totals, mapping=aes(x = deviceCategory, y = medium)) +
geom_tile(aes(fill = sessions), colour = "grey30") +
geom_text(aes(label = format(sessions, big.mark = ","))) +
scale_fill_gradient(low = "white", high = "red") +    # Specify the gradient colors
guides(fill = FALSE) +                                 # Remove the legend
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
medium_by_device
gg_sparklines <- ggplot(ga_data, mapping=aes(x = date, y = sessions)) +
geom_line() +
facet_grid(medium ~ deviceCategory, switch = "y") +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, colour = "gray80"),
panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
strip.text.y = element_text(angle = 180, hjust = 1),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank())
gg_sparklines
my_data$month<-format(df2$date,"%m")
library("googleAnalyticsR")
library("googleAuthR")
library("googleVis")
library("tidyverse")
library("magrittr")
library("tidyr")
# this is where our authentication token must live snug and warm.
googleAuthR::gar_auth("~/Dropbox/Github/.httr-oauth")
start_date <- "2016-01-01"
end_date <- "2018-01-01"
ga_data <- google_analytics(viewId = 91606028,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date","deviceCategory", "medium"),
anti_sample = TRUE)
saveRDS(ga_data, "ga_data.rds")  #saves data so that we don't call the API everytime
my_data <- readRDS("ga_data.rds") #reads data
sessions_by_device <- ggplot(my_data, mapping = aes(x = date, y = sessions, colour = deviceCategory)) +
geom_line() +
theme_light()
sessions_by_device
sessions_by_medium <- ggplot(my_data, mapping = aes(x = medium, y = sessions)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_light() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.border = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank())
sessions_by_medium
ga_data_totals <- my_data %>%
group_by(medium, deviceCategory) %>%
summarise(sessions = sum(sessions))
medium_totals <- my_data %>%
group_by(medium) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
deviceCategory_totals <- my_data %>%
group_by(deviceCategory) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
my_data$medium <- factor(my_data$medium,
levels = medium_totals$medium)
my_data$deviceCategory <- factor(my_data$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
ga_data_totals$medium <- factor(ga_data_totals$medium,
levels = rev(medium_totals$medium))    # Reversing the factor order
ga_data_totals$deviceCategory <- factor(ga_data_totals$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
head(ga_data_totals)
medium_by_device <- ggplot(ga_data_totals, mapping=aes(x = deviceCategory, y = medium)) +
geom_tile(aes(fill = sessions), colour = "grey30") +
geom_text(aes(label = format(sessions, big.mark = ","))) +
scale_fill_gradient(low = "white", high = "red") +    # Specify the gradient colors
guides(fill = FALSE) +                                 # Remove the legend
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
medium_by_device
gg_sparklines <- ggplot(ga_data, mapping=aes(x = date, y = sessions)) +
geom_line() +
facet_grid(medium ~ deviceCategory, switch = "y") +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, colour = "gray80"),
panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
strip.text.y = element_text(angle = 180, hjust = 1),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank())
gg_sparklines
my_data$month<-format(my_data$date,"%m")
my_data <-format(my_data$date,"%Y")
#sessions by month by year using dplyr then graph using ggplot2 bar graph
my_data %>%
group_by(year,month) %>%
summarize(sessions=sum(sessions)) %>%
#print table steps by month by year
print (n=100) %>%
#graph data by month by year
ggplot(aes(x=month, y=sessions, fill=year)) +
geom_bar(position='dodge', stat='identity')
library("googleAnalyticsR")
library("googleAuthR")
library("googleVis")
library("tidyverse")
library("magrittr")
library("tidyr")
# this is where our authentication token must live snug and warm.
googleAuthR::gar_auth("~/Dropbox/Github/.httr-oauth")
start_date <- "2016-01-01"
end_date <- "2018-01-01"
ga_data <- google_analytics(viewId = 91606028,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date","deviceCategory", "medium"),
anti_sample = TRUE)
saveRDS(ga_data, "ga_data.rds")  #saves data so that we don't call the API everytime
my_data <- readRDS("ga_data.rds") #reads data
sessions_by_device <- ggplot(my_data, mapping = aes(x = date, y = sessions, colour = deviceCategory)) +
geom_line() +
theme_light()
sessions_by_device
sessions_by_medium <- ggplot(my_data, mapping = aes(x = medium, y = sessions)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_light() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.border = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank())
sessions_by_medium
ga_data_totals <- my_data %>%
group_by(medium, deviceCategory) %>%
summarise(sessions = sum(sessions))
medium_totals <- my_data %>%
group_by(medium) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
deviceCategory_totals <- my_data %>%
group_by(deviceCategory) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
my_data$medium <- factor(my_data$medium,
levels = medium_totals$medium)
my_data$deviceCategory <- factor(my_data$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
ga_data_totals$medium <- factor(ga_data_totals$medium,
levels = rev(medium_totals$medium))    # Reversing the factor order
ga_data_totals$deviceCategory <- factor(ga_data_totals$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
head(ga_data_totals)
medium_by_device <- ggplot(ga_data_totals, mapping=aes(x = deviceCategory, y = medium)) +
geom_tile(aes(fill = sessions), colour = "grey30") +
geom_text(aes(label = format(sessions, big.mark = ","))) +
scale_fill_gradient(low = "white", high = "red") +    # Specify the gradient colors
guides(fill = FALSE) +                                 # Remove the legend
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
medium_by_device
gg_sparklines <- ggplot(ga_data, mapping=aes(x = date, y = sessions)) +
geom_line() +
facet_grid(medium ~ deviceCategory, switch = "y") +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, colour = "gray80"),
panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
strip.text.y = element_text(angle = 180, hjust = 1),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank())
gg_sparklines
my_data$month<-format(my_data$date,"%m")
my_data <-format(my_data$date,"%Y")
library("dplyr")
#sessions by month by year using dplyr then graph using ggplot2 bar graph
my_data %>%
group_by(year, month) %>%
summarize(sessions = sum(sessions)) %>%
#print table steps by month by year
print (n=100) %>%
#graph data by month by year
ggplot(aes(x=month, y=sessions, fill=year)) +
geom_bar(position='dodge', stat='identity')
library("googleAnalyticsR")
library("googleAuthR")
library("googleVis")
library("tidyverse")
library("magrittr")
library("tidyr")
# this is where our authentication token must live snug and warm.
googleAuthR::gar_auth("~/Dropbox/Github/.httr-oauth")
start_date <- "2016-01-01"
end_date <- "2018-01-01"
ga_data <- google_analytics(viewId = 91606028,
date_range = c(start_date, end_date),
metrics = c("sessions"),
dimensions = c("date","deviceCategory", "medium"),
anti_sample = TRUE)
saveRDS(ga_data, "ga_data.rds")  #saves data so that we don't call the API everytime
my_data <- readRDS("ga_data.rds") #reads data
sessions_by_device <- ggplot(my_data, mapping = aes(x = date, y = sessions, colour = deviceCategory)) +
geom_line() +
theme_light()
sessions_by_device
sessions_by_medium <- ggplot(my_data, mapping = aes(x = medium, y = sessions)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_light() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.border = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank())
sessions_by_medium
ga_data_totals <- my_data %>%
group_by(medium, deviceCategory) %>%
summarise(sessions = sum(sessions))
medium_totals <- my_data %>%
group_by(medium) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
deviceCategory_totals <- my_data %>%
group_by(deviceCategory) %>%
summarise(sessions = sum(sessions)) %>%
arrange(-sessions)
my_data$medium <- factor(my_data$medium,
levels = medium_totals$medium)
my_data$deviceCategory <- factor(my_data$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
ga_data_totals$medium <- factor(ga_data_totals$medium,
levels = rev(medium_totals$medium))    # Reversing the factor order
ga_data_totals$deviceCategory <- factor(ga_data_totals$deviceCategory,
levels = deviceCategory_totals$deviceCategory)
head(ga_data_totals)
medium_by_device <- ggplot(ga_data_totals, mapping=aes(x = deviceCategory, y = medium)) +
geom_tile(aes(fill = sessions), colour = "grey30") +
geom_text(aes(label = format(sessions, big.mark = ","))) +
scale_fill_gradient(low = "white", high = "red") +    # Specify the gradient colors
guides(fill = FALSE) +                                 # Remove the legend
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank())
medium_by_device
gg_sparklines <- ggplot(ga_data, mapping=aes(x = date, y = sessions)) +
geom_line() +
facet_grid(medium ~ deviceCategory, switch = "y") +
theme_light() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, colour = "gray80"),
panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
strip.text.y = element_text(angle = 180, hjust = 1),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank())
gg_sparklines
my_data$month<-format(my_data$date,"%m")
my_data <-format(my_data$date,"%Y")
library("dplyr")
#sessions by month by year using dplyr then graph using ggplot2 bar graph
my_data %>%
summarize(sessions = sum(sessions)) %>%
#print table steps by month by year
print (n=100) %>%
#graph data by month by year
ggplot(aes(x=month, y=sessions, fill=year)) +
geom_bar(position='dodge', stat='identity')
ga_data$month<-format(df2$date,"%m")
ga_data <-format(df2$date,"%Y")
#include dplyr library to group data by month and year
library(dplyr)
#sessions by month by year using dplyr then graph using ggplot2 bar graph
ga_data %>%
group_by(year,month) %>%
summarize(sessions=sum(sessions)) %>%
#print table steps by month by year
print (n=100) %>%
#graph data by month by year
ggplot(aes(x=month, y=sessions, fill=year)) +
geom_bar(position='dodge', stat='identity')
my_data$month<-format(my_data$date,"%m")
my_data <-format(my_data$date,"%Y")
